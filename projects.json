[
  {
    "name": "legohouse",
    "title": "LEGO House®",
    "short_description": "Cloud first digital and physical experiences",
    "image": "index.png",
    "images": [
      "index.png"
    ],
    "description": "<p><a href=\"https://legohouse.com\">LEGO House®</a> is the ultimate LEGO® Experience mixing physical play with digital experiences. The House was built in 2017 and consists of a number of experiences. Unfortunately many of these experiences were not able to be updated, and more importantly each experience operated independently. This meant there were a lot of technical details that were specific to each experience.</p><p>Trifork was tasked with rebuilding all the experiences in the house ensuring they were built in a similarly, as a way of establishing a new platform and taking a cloud first approach. We organised ourselves into smaller teams, each tasked with rebuilding a separate experience. I became the tech lead for a team of developers. My responsibilities included stakeholder management, technical alignment with the rest of the Trifork team across the various experiences, occasionally wearing the scrum master hat and of course development on the product itself.</p><p>This new team began work on Story Lab. Story Lab is a stop-motion experience, where guests can choose a scene and create a movie from scratch by moving Minifigures, taking pictures, adding effects and a sound track. In 3 months the team managed to rebuild the Story Lab experience from scratch, becoming the first experience on our new platform as part of the rebuild. </p><p>The tech stack consists of a number of Azure products, .NET  services deployed to a Kubernetes cluster, Github actions for testing and deploying, a messaging bus for streamlining the traffic and some really cool tech to stitch the movies together. Much of the tech was converted into platform components, ready to be used by the other teams working on different experiences. </p><p>3 weeks after launching we observed that 4.500 guests had taken 130.000 pictures resulting in over 17 hours of continuous stop-motion movies. Work has already begun on the next experience, which I hope we can showcase soon.</p>",
    "client": "LEGO House® (Trifork)",
    "role": "Tech Lead",
    "tools": "Kubernetes, Azure, .NET, React, RabbitMQ, Github",
    "year": "2023 - now"
  },
  {
    "name": "nykredit",
    "title": "Nykredit",
    "short_description": "Salesforce & Storybook integration",
    "image": "index.png",
    "images": [
      "index.png"
    ],
    "description": "<p>I was responsible for creating better tools for frontend development for the developers at Nykredit working with internal Salesforce applications, as part of a team at Trifork helping them with their Salesforce projects.</p><p>Salesforce uses a proprietary backend language (<a href=\"https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_intro_what_is_apex.htm\">Apex</a>) as well as a frontend framework: <a href=\"https://developer.salesforce.com/docs/platform/lwc/guide/get-started-oss.html\">Lightning</a> that thankfully was open sourced. The overall development experience when creating salesforce applications was sub par, when compared to most modern development. Essentially any minor change would require an entire build and deployment of the given app, just to see the results. In other words local development was not really possible.</p><p>A more modern approach was chosen, and I was tasked with creating a Storybook integration for the Lightning framework. Storybook does allow integrations with various web frameworks, but the documentation at the time was very limited. This required some digging in the implementation of Storybook to figure out a way forward.</p><p>In the end I managed to complete the integration with support for the MDX format, allowing the developers at Nykredit to speed up their local development significantly, as well as documenting their components at the same time. They were now able to write a Storybook story for page, container or just a single component, when developing their applications. </p><p>The first project it was used on was a new car loan calculator for electric vehicles. With the new storybook setup, we first created a component library with a number of components, that came in different configurations. At the same time, we started working on the entire flow, with various pages and containers specific to this new calculator. The ability to preview changes live while developing increased the overall developer experience significantly.</p>",
    "client": "Nykredit (Trifork)",
    "role": "Front-end development",
    "tools": "StoryBook, React, Salesforce, Lightning",
    "year": "2022 - 2023"
  },
  {
    "name": "grundfos",
    "title": "Grundfos BuildingConnect",
    "short_description": "Intelligent building management system.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png",
      "4.png"
    ],
    "description": "<p>Grundfos wanted help from Trifork in creating their own building management system: <a href=\"https://product-selection.grundfos.com/products/building-connect\" target=\"_blank\">Grundfos BuildingConnect.</a></p><p>I was part of the first three man team that joined the existing BuildingConnect team in April 2019. Grundfos had already built a box, with their own control software, but needed help with setting up a cloud platform. Our first achievement was getting the box connected to an IoThub, storing the data in a simple SQL and presenting it in a frontend that had a dashboard and schematic. The entire thing was protected behind Grundfos Global Login. We managed to get this up and running in two-three weeks time. </p><p>A question quickly arose: How were we going to commission our installations? The tricky thing about plantrooms is that they are all different. We needed to capture the complexity of the installation, so we could build a box with the right IO modules to connect to all the pumps, temperature sensors, valves and other equipment that might be in the plantroom. Furthermore we needed to create a manual, a bill of materials and importantly for the end customer: A visual representation of what the plantroom looked like. We discussed many possibilities but in the end we decided to come up with a smart configuration tool that was nicknamed Dumbledore.</p><p>Dumbledore is a visual drag and drop editor that allows the service technician to drag equipment and applications onto a canvas, and connect the pipes in between them, to create a digital twin of the plantroom. The technician must answer questions about the plantroom, and this is then used to create a datamodel that is used for sending data, and mapping relationships between equipment. The Dumbledore schematic editor is one of my proudest achievements on this project. I built the initial version using Canvas, this worked well, but had several limitations: It was hard to test as there weren’t any DOM elements to look for, the Canvas api is a bit quirky and lastly we couldn’t guarantee what the end result would look like on different devices. During a summer holiday it was rewritten to React and SVG, as SVG is a very reliable technology that solved the issues I had with Canvas.</p><p>The scope of the project quickly increased to include remote control, alarms and looking into data in a more detailed way using trend graphs and energy management dashboards. During the course of development, our platform was seen as a potential host for the new Grundfos MIXIT product, a smarter mixing loop. Two months later we had successfully onboarded the first MIXIT device and were displaying data for it on a new dashboard we built for it. </p><p>My role in this project has primary been frontend development, with the occasional need for backend development. Our frontends were built in Angular, the schematic editor was built using React and SVG and the backend was written in .NET. The technology was not the only thing we helped with. Grundfos had just started a digital transformation, and they were transitioning into working in an agile way using SCRUM. A big part of the project was assisting the Grundfos team with our own experiences from working in an agile way.</p>",
    "client": "Grundfos (Trifork)",
    "role": "Front-end development, back-end development, UI design, SCRUM",
    "tools": "Angular, React, .NET",
    "year": "2019 - 2022"
  },
  {
    "name": "disarm",
    "title": "DiSARM",
    "short_description": "A spatial intelligence tool, built to enable disease control programs to deliver more effective field campaigns.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png"
    ],
    "description": "<p><a href=\"https://disarm.io\">DiSARM</a> is a spatial intelligence tool, built to enable disease control programs to deliver more effective field campaigns. It is currently being used to fight malaria in Botswana, Namibia, Zimbabwe and Swaziland. The project is supported by Bill and Melinda Gates Foundation, Clinton Health Access Initiative and Google.</p><p>There are two teams on the project: a data science team and a software development team. The data science team writes models for predicting things like roof types of buildings, sprayable/unsprayable structures and risk of contracting malaria for a given area. The development team builds software that supports these models.</p><p>I worked on the development team where we wrote software to support spray campaigns. The main piece of work has been creating DOUMA (DiSARM Offline Universal Mobile Application).</p><p>DOUMA allows the malaria programs to plan their campaigns ahead of time and gives them estimates on number of structures in the areas they want to spray. After planning, the spray teams can then collect data as they are spraying houses. Once data has been collected, it is all synced to a dashboard that provides the malaria programs with statistics on their spraying efforts.</p><p>DOUMA works offline as the network connection can be quite patchy in the areas that are being sprayed. The front-end was therefore built as a Progressive Web App with Vue, to take advantage of the offline functionality of service workers. The back-end is built with NodeJS and Mongo.</p><p>The code is open source and available on the <a href=\"http://github.com/disarm-platform\">github page</a>.</p>",
    "client": "DiSARM",
    "role": "Front-end development, back-end development, UI design",
    "tools": "Vue, NodeJS, Mongo, SailsJS",
    "year": "2016 - 2018"
  },
  {
    "name": "fairstart",
    "title": "Fairstart Foundation Application",
    "short_description": "Offline course application for Mac and Windows.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png"
    ],
    "description": "<p>Fairstart Foundation has created a set of courses in early childhoold development primarily for caregivers working at orphanages. The courses are available online at their <a href=\"http: //fairstartfoundation.com/\">website</a>.</p><p>The courses have been taught in more than 20 countries. Some of these countries have very poor internet connections. This means they cannot access the online version. </p> <p>The Fairstart Foundation offline application allows their courses to be taught in these areas. The application has all the content of the online versions: text, images and even videoes. It features a simple design that allows for easy navigation. </p> <p>The first version was made in collaboration with SOS Children's Villages in three language: Kinyarwanda, Swahili and English. </p> <p>The latest version for Greenland was made in collaboration with the Greenland Social authorities. This version features two new languages: Danish and Greenlandic.</p><p> It was recently featured in a Danish newspaper, read the article <a href=\"http://e-pages.dk/btmetro/78/html5/11/\">here</a>.</p><p>The application is built with Vue and Electron and is available on Mac, Windows and Linux. </p><p>",
    "client": "Fairstart Foundation",
    "role": "Application development, UI design",
    "tools": "Electron, Vue",
    "year": "2017 - 2018"
  },
  {
    "name": "waterford",
    "title": "Waterford Kamhlaba",
    "short_description": "The official website for Waterford Kamhlaba UWCSA.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png"
    ],
    "description": "<p>The Waterford website was built as part of a community service project during my time at Waterford Kamhlaba. The old site was in desperate need of an upgrade, both visually and functionally.</p><p>A fellow student and I took the initiative to design and build a new website from scratch.</p><p>When the design was finished I put the site together and integrated it with a content management system.</p><p>The new site is optimised for search engines and social media sharing.</p><p><b>Update April 2018</b>: Please note the site has been replaced as part of a change in the communications department.</p>",
    "client": "Waterford Kamhlaba",
    "role": "Web development",
    "tools": "HTML, CSS, Perch CMS",
    "year": "2015"
  },
  {
    "name": "emoyeni",
    "title": "Emoyeni",
    "short_description": "Using USSD codes in a straight forward and easy way.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png",
      "4.png",
      "5.png"
    ],
    "description": "<p>Emoyeni was created out of frustation of using USSD codes. USSD codes are used to recharge prepaid sim cards, among other things, and look like: *555# or can be as long as *141*3*2*78413521#.</p><p>Emoyeni makes it a lot simpler to use the codes, as it gives the user an interface with actual buttons. With Emoyeni prepaid sim users can recharge airtime, send data to their friends, use mobile banking and much more. </p><p>The app works completely offline and it is even possible to send the app to other users using bluetooth from within the app itself.</p><p>Emoyeni has gone through several iterations, this being the third version.</p><p>During the 2017 MTN Apps Challenge, Emoyeni won a second place. </p><p>Emoyeni has been featured in the local news several times. Read an article by the Times of Swaziland <a href=\"/images/emoyeni/article.jpg\">here</a>.</p>",
    "client": "Personal project",
    "role": "App development",
    "tools": "Cordova (first & second version), React Native (third version)",
    "year": "2015-2017"
  },
  {
    "name": "bluetooth-share",
    "title": "Bluetooth App Share Plugin",
    "short_description": "A plugin for sharing Android apps via Bluetooth",
    "description": "<p>The Bluetooth App Share Plugin allows you to share your app's .apk with other nearby devices. </p><p>The plugin was written for a very simple reason: Although many people in Swaziland have Android smartphones, most people aren't signed in with a Google account and do not use Google Play Store. </p><p>This meant I couldn't get people to download my app <a href=\"/projects/emoyeni\">Emoyeni</a>. Inspired by the app ShareIt, where users can share the app with others using Bluetooth, I decided to write my own plugin that does exactly that. </p><p>The plugin allows a lot more people to use and share <a href=\"/projects/emoyeni\">Emoyeni</a> as internet is no longer required to get the application in the first place.</p><p>The plugin has just one function which sends the apk of the currently running application to nearby devices with bluetooth enabled. You can get the  plugin on Github, it comes in two versions: one for <a href=\"https://github.com/Nicolaidavies/react-native-bluetooth-app-share\">React Native </a> and one for <a href=\"https://github.com/Nicolaidavies/cordova-plugin-bluetooth-app-share\">Cordova</a>.</p>",
    "image": "index.png",
    "images": [
      "index.png"
    ],
    "client": "Open source project",
    "role": "Android Development",
    "tools": "Java, Cordova, React Native",
    "year": "2017"
  },
  {
    "name": "kingsapp",
    "title": "King's Office App",
    "short_description": "A gift to his Majesty King Mswati III.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png",
      "4.png",
      "5.png"
    ],
    "description": "<p>The King's Office app was created as a gift for His Majesty King Mswati III for his 48th birthday. </p><p>The app allows the King's Office to send push notifications and messages regarding official royal events. </p><p>The app was available in siSwati and English. It was the first application made entirely in siSwati. </p><p>As part of the development I had to write a translation for the popular open source library moment.js to get the dates to show in siSwati. Read more about <a href=\"/projects/momentjs\">my moment.js contribution</a>.</p><p>The gift was recognised in the Times of Swaziland. <a href=\"/images/kingsapp/article.jpg\">See more here.</a></p>",
    "client": "Personal project",
    "role": "App development",
    "tools": "Ionic",
    "year": "2016"
  },
  {
    "name": "hipnotik",
    "title": "Hipnotik App",
    "short_description": "A mobile app for Swaziland biggest Hip Hop Festival.",
    "image": "index.png",
    "images": [
      "1.png",
      "2.png",
      "3.png",
      "4.png"
    ],
    "description": "<p>Hipnotik is Swazilands biggest Hip Hop festival created by a young team of entrepreneurs at Swazijive.</p><p>They needed an app to accompany the festival that matched their brand. The Hipnotik Mobile app was the first mobile app for a festival in Swaziland. </p><p>The app shows the lineup, artist profiles, social media integration and drink prices. </p><p>The first version was created for Hipnotik 2015. The second version was completely revamped for Hipnotik 2016.</p><!--<p>Download the app on <a href=\"https: //play.google.com/store/apps/details?id=io.nicolai.hipnotik\">Google Play Store</a>.</p>-->",
    "client": "SwaziJive",
    "role": "App development",
    "tools": "Ionic",
    "year": "2015-2016"
  },
  {
    "name": "momentjs",
    "title": "moment.js siSwati Translation",
    "short_description": "A siSwati translation for the popular open source library moment.js.",
    "description": "<p>The Moment.js siSwati translation was written for the <a href=\"/projects/kingsapp\">King's Office App.</a></p><p>All parts of the app had been translated to siSwati, except for the dates. They could be entered manually, but displaying them dynamically would be much better. </p><p><a href=\"https://momentjs.com/\">Moment.js</a> is a popular open source library that solves this exact problem. It has a long list of supported languages, unfortunately siSwati was not one of them. </p><p>This prompted me to write a translation, initially the translation only worked in the King's Office app, but it was later incorporated into the official Moment.js library. The translation file can be found on the <a href=\"https://github.com/moment/moment/blob/develop/locale/ss.js\">github page</a>.</p><p>Test out the translation by clicking on the languages at the top of this page.</p>",
    "image": "index.png",
    "client": "Open source project",
    "role": "Translation, writing tests",
    "tools": "JavaScript",
    "year": "2016"
  }
]
